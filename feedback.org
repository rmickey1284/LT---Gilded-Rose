#+TITLE: Feedback

* Output
  It appears that your application broke one of the rules. Which is that 'Once the sell by date has passed, Quality
  degrades twice as fast'. I found this by testing with the input file from the original kata. I increased the values
  to ensure I would hit the scenario and found that the values didn't match the original.

* Code
  Your code is much easier to follow (witch did allow me find the bug mentioned above faster). Personally, I don't find
  a lot of value in comments within code. I have found that If I feel a comment (or additional information) is needed
  that I am better off extracting that code into a function. I then name that function based on what the comment that I
  want to make is.

  I Like the idea of separating the logic for the different types of items into their own blocks. I feel you may be able
  to take this a step further and have those code blocks separated to their own functions as well. This would allow you
  test the code of each type of item in isolation and really narrow down on the logic that you are looking for. 

* Tests
  I have not seen this structure of testing before. It appears that you are grouping your tests based on the item types.
  However, you aren't specifying the scenarios for each that you are testing. I think that had you written the scenarios
  out, you may have noticed the missing requirement.

  As an example I modified the foo tests and separated the. Doing this makes it more clear that you are only testing for
  the decrement of quality and sellin, and the floor of 0 for quality. Organizing tests this way, may help you avoid
  this in the future. It will also reduce the need for the requirement comments in your code as the requirements are
  asserted and specified in your test files.
  
